image: ${ARTIFACTORY_SERVER}/ecosystems-cloudsolutions-docker-dev/dewdrop:$DEWDROP_IMAGE_ID

stages:
  - lint
  - sprinkle-tests
  - droplets
  - publish

.helpers: &helpers |
  function validate () {
      "$@"
      if [[ $? -ne 0 ]]; then exit 1; fi
  }

before_script:
  - *helpers

run_cfn_lint:
  stage: lint
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - cwd=$(pwd)
    - git clone https://github.com/aws-quickstart/qs-cfn-lint-rules.git
    - cd qs-cfn-lint-rules
    - pip install -e .
    - cd $cwd
    - cfn-lint -a qs-cfn-lint-rules/qs_cfn_lint_rules/
    - rm -rf qs-cfn-lint-rules
  tags:
    - cm-official-docker-executor
  except:
    refs:
      - schedules
      - triggers
      - pipelines

run_taskcat_lint:
  stage: lint
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - pip install taskcat
    - taskcat lint -i .taskcat.yml
  tags:
    - cm-official-docker-executor
  except:
    refs:
      - schedules
      - triggers
      - pipelines

quick_start_ha_test_job:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7-alpine
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - declarations/**/*
      - submodules/**/*
      - templates/**/*
      - automated-test-scripts/**/*
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-aws-cloudformation-v2/examples/quickstart-f5-big-ip-virtual-edition-ha/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - apk add --no-cache git
    - git clone -b develop https://gitlab-ci-token:${CI_JOB_TOKEN}@${GITLAB_URL}/cloudsolutions/automation-templates/cloud-tools
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

execute_test_job:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7-alpine
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    - schedules
  except:
    variables:
      - $PUBLISH_DEVELOP == "true"
      - $RUN_FUNCTIONAL_TESTS == "false"
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: set in schedule!
    STACK_TYPE: dewdrop-production
  script:
    - apk add --no-cache git
    - git clone -b develop https://gitlab-ci-token:${CI_JOB_TOKEN}@${GITLAB_URL}/cloudsolutions/automation-templates/cloud-tools
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# This job gets triggered by the sprinkler.py script that get ran by the 'master_test_job' it ingests TEMPLATE_URL
# and TEMPLATE_PARAMETERS which are passed down by the sprinkler.py script. Using the variables runs dewdrop with
# the set environment variables
dewdrop_test_run:
  stage: droplets
  tags:
    - docker-executor
  variables:
    SSH_KEY: "$SSH_KEY"
    AWS_DEFAULT_REGION: "$AWS_DEFAULT_REGION"
    AWS_ACCESS_KEY_ID: "$AWS_ACCESS_KEY_ID"
    AWS_SECRET_ACCESS_KEY: "$AWS_SECRET_ACCESS_KEY"
    TEMPLATE_URL: "$TEMPLATE_URL"
    TEMPLATE_PARAMETERS: "$TEMPLATE_PARAMETERS"
    STACK_TYPE: "$STACK_TYPE"
    GITLAB_JOB_URL: "$CI_JOB_URL"
    GIT_SUBMODULE_STRATEGY: recursive
  only:
    variables:
      - $RUN_SCHEDULED_DEWDROP_TEST == "true"
  script:
    # the dewdrop image itself does not contain any test files, so ensure dewdrop
    # is run from the known location where test policies expect it to be
    # location: root of the cloud factory repository
    - pip install taskcat
    - if [ "$CLOUD_PROVIDER_ENVIRONMENT" == "aws_china" ]; then
    -   AWS_DEFAULT_REGION=$AWS_CHINA_DEFAULT_REGION
    -   AWS_ACCESS_KEY_ID=$AWS_CHINA_ACCESS_KEY_ID
    -   AWS_SECRET_ACCESS_KEY=$AWS_CHINA_SECRET_ACCESS_KEY
    - fi
    - python /dewdrop/dewdrop-docker.py
  artifacts:
      paths:
          - taskcat_outputs/**/*
      when: always
      expire_in: 1 week

publish_to_github:
  stage: publish
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/node:8
  only:
    variables:
      - $PUBLISH_DEVELOP == "true"
  except:
    refs:
      - triggers
      - pipelines
  script:
      # Execute Release script to push source to github repo
      - ./scripts/publish_github.sh
